# import Customer, Property, Category, Facility, FacilityType, Room, AddressCreateInput, PropertyCreatephotosInput, AddressCreateOneInput, RoomCreateManyWithoutPropertyInput, PolicyCreateManyWithoutPropertiesInput, CategoryCreateManyWithoutPropertiesInput, PropertyFacilityCreateManyWithoutPropertyInput, PropertyCreateOneWithoutRoomsInput, PriceCreateManyInput, BedCreateManyWithoutRoomsInput, RoomFacilityCreateManyWithoutRoomInput, TripType from "./generated/prisma.graphql"

type Query {
    findProperties(filter: PropertySearch): [Property!]!
    findCustomer(email: String!): Customer
    fetchPolicies(id: ID, policy: String): [Policy!]!
    fetchCategories(id: ID, name: String): [Category!]!
    fetchFacilities(id: ID, name: String, type: String): [Facility!]!
    fetchFacilityTypes(id: ID, name: String, filter: String): [FacilityType!]!
    fetchOneProperty(id: ID!): Property
    fetchPriceTypes(id: ID, name: String): [PriceType!]!
    fetchBedTypes(id: ID, name: String): [BedType!]!
    fetchCurrencies(id: ID, symbol: String): [Currency!]!
    fetchTripTypes(id: ID, name: String): [TripType!]!
}

type Mutation {
    customerSignup(name: String, email: String!, password: String!): CustomerAuthPayload
    customerLogin(email: String!, password: String!): CustomerAuthPayload
    updateCustomerInfo(email: String, password: String, address: AddressCreateInput, phone: String): Customer
    createProperty(name: String!, about: String, logo: String, phone: String!, email: String!, photos: PropertyCreatephotosInput, address: AddressCreateOneInput!, rooms: RoomCreateManyWithoutPropertyInput, policies: PolicyCreateManyWithoutPropertiesInput, categories: CategoryCreateManyWithoutPropertiesInput, facilities: PropertyFacilityCreateManyWithoutPropertyInput): Property
    createRoom(name: String, property: String, prices: [RoomPriceCreateInput!]!, beds:[RoomBedCreateInput!]!, facilities: [String!]!): Room
    updateRoom(room: String!, name: String, prices: [RoomPriceCreateInput], beds: [RoomBedCreateInput], facilities: [String], deletePrices: [String], deleteBeds: [String], deleteFacilities: [String]): Room
    #createRoom(name: String, property: ID!, prices: [RoomPriceCreateInput!]!): Room
    # createRoom(name: String, property: PropertyCreateOneWithoutRoomsInput!, prices: PriceCreateManyInput!, beds: BedCreateManyWithoutRoomsInput!, facilties: RoomFacilityCreateManyWithoutRoomInput): Room

    # updateBasicHotelInfo(id: ID!, name: String, about: String, logo: String): Hotel
    # createPropertyForHotel(name: String!, hotel: ID!, address: AddressCreateInput!, phone: String!, email: String!): PropertyAuthPayload
    #createRoomForProperty(hotel: ID!, property: ID!, name: String, price: Float!, beds: [Bed!]!): Room
}

type CustomerAuthPayload {
    token: String
    customer: Customer
}

type PropertyAuthPayload {
    property: Property
}

input RoomPriceCreateInput {
    id: ID
    amount: Float!
    currency: String!
    type: String!
}

input RoomBedCreateInput {
    id: ID
    type: String!
    quantity: Int!
}

input PropertySearch {
    name: String
    city: String
    triptype: String
    checkIn: DateTime
    checkOut: DateTime
    petFriendly: Boolean
    adults: Int
    kids: Int
    infants: Int
    pets: Int
}